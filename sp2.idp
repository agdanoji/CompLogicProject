vocabulary sp_voc{
	type node
	start:node
	to:node
	edge(node,node) 
	edgeOnPath(node,node) 
	reaches(node,node)
}

theory sp_theory1:sp_voc {
    reaches(start,to). // (2)
    ! x y : edgeOnPath(x,y) => edge(x,y). // (1)
	{
    	! x y : reaches(x,y) <- edgeOnPath(x,y) | edgeOnPath(y,x).
		! x y: reaches(x,y) <- ?z:  edgeOnPath(x,z) & reaches(z,y).
	}	

}

structure sp_struct:sp_voc {
	node = {A..D} // shorthand for A,B,C,D
	edge = {A,B; B,C; C,D; A,D} // `; ' separated list of tuples
	start = A
	to = D
}

term lengthOfPath:sp_voc{
    #{x,y:edgeOnPath(x,y)} 
}

procedure main() {
stdoptions.verbosity.grounding = 1
stdoptions.verbosity.solving = 2
sol = minimize(sp_theory1,sp_struct,lengthOfPath)[1]
if (sol == nil) then
	    print ("No models exist .\n") 
else 
        print (sol)
end
}        
